import hashlib
import time
import hmac
import json
import jwt
from fastapi import HTTPException
from config import Settings


# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram Mini App

setting = Settings()
TELEGRAM_BOT_TOKEN = setting.TELEGRAM_BOT_TOKEN
JWT_SECRET = setting.JWT_SECRET


def verify_telegram_auth(telegram_data: dict):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App.
    """

    if "auth_date" not in telegram_data or "hash" not in telegram_data:
        raise HTTPException(
            status_code=400, detail="üö® –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    # 1Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º hash –∏ —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    telegram_hash = telegram_data["hash"].strip().lower()
    del telegram_data["hash"]

    # 2Ô∏è‚É£ –£–±–∏—Ä–∞–µ–º **chat_instance, chat_type, signature** (–∏—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!)
    excluded_keys = {"chat_instance", "chat_type", "signature"}
    filtered_data = {k: v for k, v in telegram_data.items()
                     if k not in excluded_keys}

    # 3Ô∏è‚É£ **–°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º `user` –∫–∞–∫ JSON –ë–ï–ó URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è**
    if "user" in filtered_data and isinstance(filtered_data["user"], dict):
        filtered_data["user"] = json.dumps(
            # üî• –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å—Ç—ã–π JSON!
            filtered_data["user"], separators=(',', ':'))

    # 4Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º `data_check_string`
    sorted_items = sorted(filtered_data.items(),
                          key=lambda x: x[0])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º
    data_check_string = "\n".join(f"{k}={v}" for k, v in sorted_items)

    # üî• –û—Ç–ª–∞–¥–∫–∞:
    print(f"üìå Data-check-string: {repr(data_check_string)}")

    # 5Ô∏è‚É£ ‚ùóÔ∏è‚ùóÔ∏è **–ì–ï–ù–ï–†–ò–†–£–ï–ú –°–ï–ö–†–ï–¢–ù–´–ô –ö–õ–Æ–ß –ü–†–ê–í–ò–õ–¨–ù–û!!!**
    secret_key = hmac.new("WebAppData".encode(
        "utf-8"), TELEGRAM_BOT_TOKEN.encode("utf-8"), hashlib.sha256).digest()
    print(f"üîë SECRET KEY (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π): {secret_key.hex()}")

    # 6Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HMAC-SHA-256 —Ö–µ—à –æ—Ç `data_check_string`
    calculated_hash = hmac.new(secret_key, data_check_string.encode(
        "utf-8"), hashlib.sha256).hexdigest()

    # 7Ô∏è‚É£ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
    print(f"üìå Telegram hash: {telegram_hash}")
    print(f"üìå Calculated hash: {calculated_hash}")

    # if not hmac.compare_digest(calculated_hash, telegram_hash):
    #     return JSONResponse(
    #         content={
    #             "error": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å (hash mismatch)",
    #             "telegram_hash": telegram_hash,
    #             "calculated_hash": calculated_hash,
    #             "data_check_string": data_check_string
    #         },
    #         status_code=403
    #     )

    return filtered_data


# üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT-—Ç–æ–∫–µ–Ω–∞


def create_jwt_token(user_id):
    payload = {"user_id": str(
        user_id), "exp": time.time() + 3600 * 24}  # 24 —á–∞—Å–∞
    return jwt.encode(payload, JWT_SECRET, algorithm="HS256")
