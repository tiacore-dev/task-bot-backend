import hashlib
import hmac
import time
import jwt
from fastapi import HTTPException
from app.config import Settings


# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram Mini App

setting = Settings()
TELEGRAM_BOT_TOKEN = setting.TELEGRAM_BOT_TOKEN
JWT_SECRET = setting.JWT_SECRET


def verify_telegram_auth(telegram_data: dict):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç Telegram.
    """
    auth_date = int(telegram_data["auth_date"])
    current_time = int(time.time())

    if current_time - auth_date > 86400:  # –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        raise HTTPException(
            status_code=403, detail="Authentication data expired")

    secret_key = hashlib.sha256(TELEGRAM_BOT_TOKEN.encode()).digest()
    sorted_data = "\n".join(f"{k}={v}" for k, v in sorted(
        telegram_data.items()) if k != "hash")
    data_hash = hmac.new(secret_key, sorted_data.encode(),
                         hashlib.sha256).hexdigest()

    if data_hash != telegram_data["hash"]:
        raise HTTPException(
            status_code=403, detail="Invalid authentication data")

    return telegram_data  # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É


# üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT-—Ç–æ–∫–µ–Ω–∞
def create_jwt_token(user_id):
    payload = {"user_id": str(
        user_id), "exp": time.time() + 3600 * 24}  # 24 —á–∞—Å–∞
    return jwt.encode(payload, JWT_SECRET, algorithm="HS256")
