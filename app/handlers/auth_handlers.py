import hashlib
import time
import unicodedata
import hmac
from collections import OrderedDict
import jwt
from fastapi import HTTPException
from app.config import Settings


# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram Mini App

setting = Settings()
TELEGRAM_BOT_TOKEN = setting.TELEGRAM_BOT_TOKEN
JWT_SECRET = setting.JWT_SECRET


def verify_telegram_auth(telegram_data: dict):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Telegram.
    """

    if "auth_date" not in telegram_data or "hash" not in telegram_data:
        raise HTTPException(
            status_code=400, detail="üö® –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    auth_date = int(telegram_data["auth_date"])
    current_time = int(time.time())

    if current_time - auth_date > 86400:
        raise HTTPException(status_code=403, detail="‚è≥ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")

    # üö® 2Ô∏è‚É£ **–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (Telegram —Ç—Ä–µ–±—É–µ—Ç WebAppData!)**
    secret_key = hmac.new(TELEGRAM_BOT_TOKEN.encode(
        "utf-8"), b"WebAppData", hashlib.sha256).digest()
    print(
        f"üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (SHA256 –æ—Ç WebAppData + —Ç–æ–∫–µ–Ω): {secret_key.hex()}")

    # 3Ô∏è‚É£ –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–±–∏—Ä–∞–µ–º `hash`, `signature`, –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    filtered_data = {}
    for k, v in telegram_data.items():
        if k in ["hash", "signature"]:
            continue  # –ò—Å–∫–ª—é—á–∞–µ–º —ç—Ç–∏ –ø–æ–ª—è
        if isinstance(v, dict):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã **–ë–ï–ó `user.`**
            for sub_k, sub_v in v.items():
                if sub_v in [None, ""]:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    continue
                if isinstance(sub_v, bool):  # True/False -> "1"/"0"
                    sub_v = "1" if sub_v else "0"
                filtered_data[sub_k] = unicodedata.normalize(
                    "NFKC", str(sub_v))  # –£–±–∏—Ä–∞–µ–º `user.`
        else:
            if v in [None, ""]:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue
            if isinstance(v, bool):  # True/False -> "1"/"0"
                v = "1" if v else "0"
            filtered_data[k] = unicodedata.normalize("NFKC", str(v))

    # 4Ô∏è‚É£ **–°–æ–∑–¥–∞—ë–º OrderedDict —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º Telegram**
    ordered_keys = [
        "auth_date", "chat_instance", "chat_type",
        "allows_write_to_pm", "first_name",
        "id", "is_premium", "language_code",
        "photo_url", "username"
    ]

    ordered_data = OrderedDict()
    for key in ordered_keys:
        if key in filtered_data:
            ordered_data[key] = filtered_data[key]

    # 5Ô∏è‚É£ **–§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Telegram**
    check_string = "\n".join(f"{k}={v}" for k, v in ordered_data.items())

    print(f"üìå –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:\n{check_string}\n")

    # 6Ô∏è‚É£ **–í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º**
    calculated_hash = hmac.new(secret_key, check_string.encode(
        "utf-8"), hashlib.sha256).hexdigest()

    # 7Ô∏è‚É£ Telegram –ø–µ—Ä–µ–¥–∞–µ—Ç `hash` –≤ HEX ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    telegram_hash = telegram_data["hash"].lower()

    print(f"üìå Telegram –ø–µ—Ä–µ–¥–∞–ª hash: {telegram_hash}")
    print(f"üìå –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π hash: {calculated_hash}")

    # 8Ô∏è‚É£ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º `hash`
    if not hmac.compare_digest(calculated_hash, telegram_hash):
        raise HTTPException(
            status_code=403, detail="‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å (hash mismatch)")

    return telegram_data  # ‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
# üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT-—Ç–æ–∫–µ–Ω–∞


def create_jwt_token(user_id):
    payload = {"user_id": str(
        user_id), "exp": time.time() + 3600 * 24}  # 24 —á–∞—Å–∞
    return jwt.encode(payload, JWT_SECRET, algorithm="HS256")
