from uuid import UUID
from loguru import logger
from fastapi import APIRouter, UploadFile, File, Form, HTTPException, Depends
from fastapi.responses import JSONResponse
from app.pydantic_models.task_schemas import TaskSchema, AcceptTaskRequest, MyTaskSchema
from app.pydantic_models.transaction_schemas import TransactionSchema
from app.s3.s3_manager import AsyncS3Manager
from app.database.managers.db_manager import get_user_by_telegram_id
from app.database.models import Task, TaskAssignment, User, Transaction, UserAccount, TaskVerification


tasks_router = APIRouter(prefix="/tasks", tags=["tasks"])

# üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π


@tasks_router.get("/", response_model=list[TaskSchema])
async def get_available_tasks(telegram_id: int):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è–ª. """
    try:
        user = await User.get_or_none(telegram_id=telegram_id)
        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        # –ü–æ–ª—É—á–∞–µ–º ID —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        taken_task_ids = await TaskAssignment.filter(user=user.user_id).values_list("task_id", flat=True)

        # –ò—â–µ–º –∑–∞–¥–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º active, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã–µ
        tasks = await Task.filter(status="active").exclude(task_id__in=taken_task_ids).all().values()

        return [TaskSchema(**task) for task in tasks]

    except HTTPException as http_err:
        logger.warning(f"‚ö†Ô∏è {http_err.detail}")
        return JSONResponse(status_code=http_err.status_code, content={"error": http_err.detail})
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {str(e)}")
        return JSONResponse(status_code=500, content={"error": "Internal server error"})


# üìå –ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ


@tasks_router.post("/{task_id}/accept")
async def accept_task(
    task_id: str,
    telegram_id: int,
    data: AcceptTaskRequest
):
    """ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Ä–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç—É. """
    logger.info(
        f"üìå –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å telegram_id={telegram_id}")

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not task_id:
            logger.warning("‚ùå –û—à–∏–±–∫–∞: task_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
            raise HTTPException(status_code=400, detail="Task ID is required")

        if not telegram_id:
            logger.warning("‚ùå –û—à–∏–±–∫–∞: telegram_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
            raise HTTPException(
                status_code=400, detail="Telegram ID is required")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await User.get_or_none(telegram_id=telegram_id)
        if not user:
            logger.warning(
                f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=404, detail="User not found")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        task = await Task.get_or_none(task_id=task_id, status="active")
        if not task:
            logger.warning(
                f"‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            raise HTTPException(
                status_code=404, detail="Task not found or unavailable")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        existing_assignment = await TaskAssignment.get_or_none(task=task_id, user=user.user_id)
        if existing_assignment:
            logger.warning(
                f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ –≤–∑—è–ª –∑–∞–¥–∞–Ω–∏–µ {task_id}")
            raise HTTPException(
                status_code=400, detail="You already accepted this task")
        account = await UserAccount.get_or_none(account_id=data.account_id)
        if not account:
            logger.warning("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=404, detail="Account not found")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è
        await TaskAssignment.create(user_id=user.user_id, task=task, status="in_progress", assigned_profile=account)

        logger.info(
            f"‚úÖ –£—Å–ø–µ—Ö: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ {task_id}")
        return {"message": "Task accepted"}

    except HTTPException as http_err:
        logger.error(
            f"‚ùå HTTPException: {http_err.detail} (–∫–æ–¥ {http_err.status_code})")
        return JSONResponse(status_code=http_err.status_code, content={"error": http_err.detail})

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
        return JSONResponse(status_code=500, content={"error": "Internal server error"})

# üìå –°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É


@tasks_router.post("/{task_id}/submit")
async def submit_task(
    task_id: UUID,
    assignment_id: UUID = Form(...),
    details: str = Form(None),
    screenshot: UploadFile = File(...),
    user: User = Depends(get_user_by_telegram_id)
):
    try:
        logger.info(
            f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è {task_id} (assignment_id={assignment_id})")
        assignment = await TaskAssignment.get_or_none(
            assignment_id=assignment_id
        )
        if not assignment:
            raise HTTPException(
                status_code=404, detail="Task not found or already submitted"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        assignment.status = "pending_review"
        await assignment.save()

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        file_bytes = await screenshot.read()
        filename = screenshot.filename or "screenshot.png"

        s3 = AsyncS3Manager()
        s3_key = await s3.upload_bytes(file_bytes, user.telegram_id, filename)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await TaskVerification.create(
            task_assignment=assignment,
            status="pending",
            details=details,
            s3_name=s3_key
        )

        return {"message": "Task submitted for review"}

    except HTTPException as http_err:
        return JSONResponse(status_code=http_err.status_code, content={"error": http_err.detail})

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–¥–∞—á–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return JSONResponse(status_code=500, content={"error": f"Internal server error: {e}"})


# üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞–Ω–∏–π


@tasks_router.get("/my", response_model=list[MyTaskSchema])
async def get_my_tasks(user: User = Depends(get_user_by_telegram_id)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        assignments = await TaskAssignment.filter(user=user.user_id).prefetch_related("task__status").all()

        result = []
        for a in assignments:
            task = await a.task  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º task
            result.append(MyTaskSchema(
                assignment_id=a.assignment_id,
                task_id=task.task_id,
                description=task.description,
                reward=task.reward,
                status_id=task.status.status_id,
            ))
        return result

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return JSONResponse(status_code=500, content={"error": "Internal server error"})


@tasks_router.get("/completed", response_model=list[TaskSchema])
async def get_my_completed_tasks(user: User = Depends(get_user_by_telegram_id)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        assignments = await TaskAssignment.filter(user=user.user_id, status="completed").prefetch_related("task").values()
        return [TaskSchema(**assignment.task) for assignment in assignments]
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return JSONResponse(status_code=500, content={"error": "Internal server error"})


@tasks_router.get("/history", response_model=list[TransactionSchema])
async def get_my_transaction_history(user: User = Depends(get_user_by_telegram_id)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        transactions = await Transaction.filter(user=user.user_id).prefetch_related("task").values()
        return [TransactionSchema(**transaction) for transaction in transactions]
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return JSONResponse(status_code=500, content={"error": "Internal server error"})


@tasks_router.get("/{task_id}", response_model=TaskSchema)
async def get_task_by_id(task_id: str, user: User = Depends(get_user_by_telegram_id)):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID. """
    try:
        task = await Task.get_or_none(task_id=task_id).values()
        if not task:
            raise HTTPException(status_code=404, detail="Task not found")
        return TaskSchema(**task)
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
        return JSONResponse(status_code=500, content={"error": "Internal server error"})
