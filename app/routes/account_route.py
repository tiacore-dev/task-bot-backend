import json
from fastapi import APIRouter, Depends, HTTPException
from loguru import logger
from app.database.managers.db_manager import get_user_by_telegram_id
from app.database.models import User, UserAccount
from app.pydantic_models.user_schemas import UserSchema, UserCreateSchema, UserResponseSchema
from app.pydantic_models.account_schemas import UserAccountSchema
from app.handlers.auth_handlers import verify_telegram_auth

account_router = APIRouter(prefix="/account", tags=["account"])


@account_router.post("/auth", response_model=UserResponseSchema)
async def auth(telegram_data: dict):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App.
    """
    logger.info("üìå –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram: %s", telegram_data)

    try:
        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram
        user_data = verify_telegram_auth(telegram_data)
        logger.info("üìå –ü–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram: %s", user_data)

        if not user_data:
            logger.warning("üö® –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram-–¥–∞–Ω–Ω—ã—Ö!")
            raise HTTPException(
                status_code=403, detail="Invalid Telegram auth data")

        # üîπ –î–µ–∫–æ–¥–∏—Ä—É–µ–º `user` (–æ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫–∞!)
        if isinstance(user_data["user"], str):
            user_data["user"] = json.loads(user_data["user"])

        logger.info("üìå –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s",
                    user_data["user"])

        telegram_id = user_data["user"]["id"]
        username = user_data["user"]["username"]

        logger.info("üìå Telegram ID: %s | Username: %s", telegram_id, username)

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        user = await User.get_or_none(telegram_id=telegram_id)
        if user:
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: %s", user)
        else:
            logger.info("üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...")
            user = await User.create(
                telegram_id=telegram_id,
                username=username,
                role_id="executor",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äì –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                balance=0,
            )
            logger.info("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: %s", user)

        # üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üìå –í–æ–∑–≤—Ä–∞—â–∞–µ–º user_id: %s", user.user_id)
        return UserResponseSchema(user_id=user.user_id, username=user.username)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ auth(): %s", str(e))
        raise HTTPException(
            status_code=500, detail="Internal Server Error") from e


# üìå 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@account_router.get("/me", response_model=UserSchema)
async def get_current_user(user: User = Depends(get_user_by_telegram_id)):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Tortoise ORM –≤ Pydantic
    return UserSchema.model_validate(user)


# üìå 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@account_router.put("/me", response_model=UserSchema)
async def update_user(data: UserCreateSchema, user: User = Depends(get_user_by_telegram_id)):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º–µ–Ω–∏).
    """
    user.username = data.username or user.username
    await user.save()
    return user


# üìå 4. –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ü—Å–µ—Ç–∏
@account_router.post("/accounts", response_model=UserAccountSchema)
async def add_account(account_data: UserAccountSchema, user: User = Depends(get_user_by_telegram_id)):
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ—Ü—Å–µ—Ç–∏ (YouTube, Twitter, Telegram –∏ —Ç. –¥.).
    """
    account = await UserAccount.create(
        user_id=user.user_id,
        platform=account_data.platform,
        account_name=account_data.account_name,
        account_platform_id=account_data.account_platform_id,
    )
    return account


# üìå 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@account_router.get("/accounts", response_model=list[UserAccountSchema])
async def get_accounts(user: User = Depends(get_user_by_telegram_id)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π.
    """
    return await UserAccount.filter(user_id=user.user_id).all()
