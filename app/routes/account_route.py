import uuid
from uuid import UUID
from fastapi import APIRouter, Depends, HTTPException, status
from loguru import logger
from app.database.managers.db_manager import get_user_by_telegram_id
from app.database.models import User, UserAccount, TaskPlatform
from app.pydantic_models.user_schemas import UserSchema, UserCreateSchema
from app.pydantic_models.account_schemas import UserAccountCreateSchema, UserAccountSchema, UserAccountUpdateSchema


account_router = APIRouter(tags=["account"])

# üìå 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ


@account_router.get("/accounts/me", response_model=UserSchema)
async def get_current_user(user: User = Depends(get_user_by_telegram_id)):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Tortoise ORM –≤ Pydantic
    return UserSchema.model_validate(user)


# üìå 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@account_router.patch("/me", response_model=UserSchema)
async def update_user(data: UserCreateSchema, user: User = Depends(get_user_by_telegram_id)):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º–µ–Ω–∏).
    """
    user.username = data.username or user.username
    await user.save()
    return user

# üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è


@account_router.patch("/{account_id}", status_code=status.HTTP_204_NO_CONTENT)
async def update_task(account_id: UUID, account_data: UserAccountUpdateSchema, user: User = Depends(get_user_by_telegram_id)):
    account = await UserAccount.get_or_none(account_id=account_id)
    if not account:
        raise HTTPException(status_code=404, detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    updated_fields = account_data.dict(
        exclude_unset=True)  # –ò—Å–∫–ª—é—á–∞–µ–º None-–∑–Ω–∞—á–µ–Ω–∏—è
    await account.update_from_dict(updated_fields)
    await account.save()

    return


@account_router.delete("/{account_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_task(account_id: UUID,  user: User = Depends(get_user_by_telegram_id)):
    account = await UserAccount.get_or_none(account_id=account_id)
    if not account:
        raise HTTPException(status_code=404, detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await account.delete()

    return


# üìå 4. –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ü—Å–µ—Ç–∏


@account_router.post("/accounts", status_code=201)
async def add_account(account_data: UserAccountCreateSchema, user: User = Depends(get_user_by_telegram_id)):
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ—Ü—Å–µ—Ç–∏ (YouTube, Twitter, Telegram –∏ —Ç. –¥.).
    """
    try:
        logger.info(
            f"üì• –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_data.dict()}")
        logger.info(f"üîç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platform = await TaskPlatform.get_or_none(platform_id=account_data.platform)
        if platform:
            logger.info(
                f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞: {platform.platform_name} ({platform.platform_id})")
        else:
            logger.warning(
                f"‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å ID {account_data.platform} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            raise HTTPException(status_code=404, detail="Platform not found")

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # user = await User.get_or_none(user_id=user.user_id)
        # if not user:
        #     logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        #     raise HTTPException(status_code=404, detail="User not found")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        await UserAccount.create(
            account_id=uuid.uuid4(),
            user=user,
            platform=platform,
            account_name=account_data.account_name,
            account_platform_id=account_data.account_platform_id,
        )

        logger.info(
            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}")
        return {"message": "Account successfully linked"}

    except HTTPException as http_err:
        raise http_err
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        raise HTTPException(
            status_code=500, detail="Internal server error") from e


# üìå 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@account_router.get("/accounts", response_model=list[UserAccountSchema])
async def get_accounts(user: User = Depends(get_user_by_telegram_id)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π.
    """
    accounts = await UserAccount.filter(user=user.user_id).all().values(
        "account_id",
        "user_id",
        "platform_id",
        "account_name",
        "account_platform_id",
    )

    return [UserAccountSchema(
        account_id=acc["account_id"],
        user=acc["user_id"],
        platform=acc["platform_id"],
        account_name=acc["account_name"],
        account_platform_id=acc["account_platform_id"],
    ) for acc in accounts]


@account_router.get("/platforms")
async def get_all_platforms():
    return await TaskPlatform.all().values("platform_id", "platform_name")
