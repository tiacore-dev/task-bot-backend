from fastapi import APIRouter, Depends, HTTPException
from app.database.managers.db_manager import get_user_by_telegram_id
from app.database.models import User, UserAccount
from app.pydantic_models.user_schemas import UserSchema, UserCreateSchema
from app.pydantic_models.account_schemas import UserAccountSchema
from app.handlers.auth_handlers import verify_telegram_auth, create_jwt_token


account_router = APIRouter(prefix="/account", tags=["account"])

# üìå 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App


@account_router.post("/auth")
async def auth(telegram_data: dict):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App.
    """
    print("üìå –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:", telegram_data)  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

    user_data = verify_telegram_auth(telegram_data)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å

    if not user_data:
        raise HTTPException(
            status_code=403, detail="Invalid Telegram auth data")

    telegram_id = user_data["id"]
    username = user_data.get("username")

    user = await User.get(telegram_id=telegram_id)

    if not user:
        user = await User.create(
            telegram_id=telegram_id,
            username=username,
            role_id="executor",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äì –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT-—Ç–æ–∫–µ–Ω
    token = create_jwt_token(user.user_id)

    return {"user": UserSchema.from_orm(user), "token": token}


# üìå 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@account_router.get("/me", response_model=UserSchema)
async def get_current_user(user: User = Depends(get_user_by_telegram_id)):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Tortoise ORM –≤ Pydantic
    return UserSchema.model_validate(user)


# üìå 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@account_router.put("/me", response_model=UserSchema)
async def update_user(data: UserCreateSchema, user: User = Depends(get_user_by_telegram_id)):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º–µ–Ω–∏).
    """
    user.username = data.username or user.username
    await user.save()
    return user


# üìå 4. –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ü—Å–µ—Ç–∏
@account_router.post("/accounts", response_model=UserAccountSchema)
async def add_account(account_data: UserAccountSchema, user: User = Depends(get_user_by_telegram_id)):
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ—Ü—Å–µ—Ç–∏ (YouTube, Twitter, Telegram –∏ —Ç. –¥.).
    """
    account = await UserAccount.create(
        user_id=user.user_id,
        platform=account_data.platform,
        account_name=account_data.account_name,
        account_platform_id=account_data.account_platform_id,
    )
    return account


# üìå 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@account_router.get("/accounts", response_model=list[UserAccountSchema])
async def get_accounts(user: User = Depends(get_user_by_telegram_id)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π.
    """
    return await UserAccount.filter(user_id=user.user_id).all()
